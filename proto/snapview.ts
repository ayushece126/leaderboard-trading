// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: service/snapview.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { MintPoolSnap, MintWalletSnap } from "./message/snap_ext";

export const protobufPackage = "snapview";

export interface Wallet {
  publicKey: string;
  name: string;
  balance?: number | undefined;
}

export interface GetSolPriceRequest {
}

export interface GetSolPriceResponse {
  price: number;
}

export interface GetMintPoolSnapRequest {
  mintAddress: string;
}

export interface GetMintPoolSnapResponse {
  snap?: MintPoolSnap | undefined;
}

export interface GetUserPositionsRequest {
  userUuid: string;
}

export interface GetUserPositionsResponse {
  snaps: MintWalletSnap[];
}

export interface GetUserPositionRequest {
  walletAddress: string;
  mintAddress: string;
}

export interface GetUserPositionResponse {
  snap?: MintWalletSnap | undefined;
}

export interface GetWalletsRequest {
  userUuid: string;
}

export interface GetWalletsResponse {
  wallets: Wallet[];
}

function createBaseWallet(): Wallet {
  return { publicKey: "", name: "", balance: undefined };
}

export const Wallet: MessageFns<Wallet> = {
  encode(message: Wallet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey !== "") {
      writer.uint32(10).string(message.publicKey);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.balance !== undefined) {
      writer.uint32(25).double(message.balance);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Wallet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWallet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.balance = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Wallet {
    return {
      publicKey: isSet(object.publicKey) ? globalThis.String(object.publicKey) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      balance: isSet(object.balance) ? globalThis.Number(object.balance) : undefined,
    };
  },

  toJSON(message: Wallet): unknown {
    const obj: any = {};
    if (message.publicKey !== "") {
      obj.publicKey = message.publicKey;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.balance !== undefined) {
      obj.balance = message.balance;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Wallet>, I>>(base?: I): Wallet {
    return Wallet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Wallet>, I>>(object: I): Wallet {
    const message = createBaseWallet();
    message.publicKey = object.publicKey ?? "";
    message.name = object.name ?? "";
    message.balance = object.balance ?? undefined;
    return message;
  },
};

function createBaseGetSolPriceRequest(): GetSolPriceRequest {
  return {};
}

export const GetSolPriceRequest: MessageFns<GetSolPriceRequest> = {
  encode(_: GetSolPriceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSolPriceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSolPriceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetSolPriceRequest {
    return {};
  },

  toJSON(_: GetSolPriceRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSolPriceRequest>, I>>(base?: I): GetSolPriceRequest {
    return GetSolPriceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSolPriceRequest>, I>>(_: I): GetSolPriceRequest {
    const message = createBaseGetSolPriceRequest();
    return message;
  },
};

function createBaseGetSolPriceResponse(): GetSolPriceResponse {
  return { price: 0 };
}

export const GetSolPriceResponse: MessageFns<GetSolPriceResponse> = {
  encode(message: GetSolPriceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.price !== 0) {
      writer.uint32(9).double(message.price);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSolPriceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSolPriceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.price = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSolPriceResponse {
    return { price: isSet(object.price) ? globalThis.Number(object.price) : 0 };
  },

  toJSON(message: GetSolPriceResponse): unknown {
    const obj: any = {};
    if (message.price !== 0) {
      obj.price = message.price;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSolPriceResponse>, I>>(base?: I): GetSolPriceResponse {
    return GetSolPriceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSolPriceResponse>, I>>(object: I): GetSolPriceResponse {
    const message = createBaseGetSolPriceResponse();
    message.price = object.price ?? 0;
    return message;
  },
};

function createBaseGetMintPoolSnapRequest(): GetMintPoolSnapRequest {
  return { mintAddress: "" };
}

export const GetMintPoolSnapRequest: MessageFns<GetMintPoolSnapRequest> = {
  encode(message: GetMintPoolSnapRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mintAddress !== "") {
      writer.uint32(10).string(message.mintAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMintPoolSnapRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMintPoolSnapRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mintAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMintPoolSnapRequest {
    return { mintAddress: isSet(object.mintAddress) ? globalThis.String(object.mintAddress) : "" };
  },

  toJSON(message: GetMintPoolSnapRequest): unknown {
    const obj: any = {};
    if (message.mintAddress !== "") {
      obj.mintAddress = message.mintAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMintPoolSnapRequest>, I>>(base?: I): GetMintPoolSnapRequest {
    return GetMintPoolSnapRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMintPoolSnapRequest>, I>>(object: I): GetMintPoolSnapRequest {
    const message = createBaseGetMintPoolSnapRequest();
    message.mintAddress = object.mintAddress ?? "";
    return message;
  },
};

function createBaseGetMintPoolSnapResponse(): GetMintPoolSnapResponse {
  return { snap: undefined };
}

export const GetMintPoolSnapResponse: MessageFns<GetMintPoolSnapResponse> = {
  encode(message: GetMintPoolSnapResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snap !== undefined) {
      MintPoolSnap.encode(message.snap, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMintPoolSnapResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMintPoolSnapResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snap = MintPoolSnap.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMintPoolSnapResponse {
    return { snap: isSet(object.snap) ? MintPoolSnap.fromJSON(object.snap) : undefined };
  },

  toJSON(message: GetMintPoolSnapResponse): unknown {
    const obj: any = {};
    if (message.snap !== undefined) {
      obj.snap = MintPoolSnap.toJSON(message.snap);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMintPoolSnapResponse>, I>>(base?: I): GetMintPoolSnapResponse {
    return GetMintPoolSnapResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMintPoolSnapResponse>, I>>(object: I): GetMintPoolSnapResponse {
    const message = createBaseGetMintPoolSnapResponse();
    message.snap = (object.snap !== undefined && object.snap !== null)
      ? MintPoolSnap.fromPartial(object.snap)
      : undefined;
    return message;
  },
};

function createBaseGetUserPositionsRequest(): GetUserPositionsRequest {
  return { userUuid: "" };
}

export const GetUserPositionsRequest: MessageFns<GetUserPositionsRequest> = {
  encode(message: GetUserPositionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userUuid !== "") {
      writer.uint32(10).string(message.userUuid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserPositionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserPositionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userUuid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserPositionsRequest {
    return { userUuid: isSet(object.userUuid) ? globalThis.String(object.userUuid) : "" };
  },

  toJSON(message: GetUserPositionsRequest): unknown {
    const obj: any = {};
    if (message.userUuid !== "") {
      obj.userUuid = message.userUuid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserPositionsRequest>, I>>(base?: I): GetUserPositionsRequest {
    return GetUserPositionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserPositionsRequest>, I>>(object: I): GetUserPositionsRequest {
    const message = createBaseGetUserPositionsRequest();
    message.userUuid = object.userUuid ?? "";
    return message;
  },
};

function createBaseGetUserPositionsResponse(): GetUserPositionsResponse {
  return { snaps: [] };
}

export const GetUserPositionsResponse: MessageFns<GetUserPositionsResponse> = {
  encode(message: GetUserPositionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.snaps) {
      MintWalletSnap.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserPositionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserPositionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snaps.push(MintWalletSnap.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserPositionsResponse {
    return {
      snaps: globalThis.Array.isArray(object?.snaps) ? object.snaps.map((e: any) => MintWalletSnap.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetUserPositionsResponse): unknown {
    const obj: any = {};
    if (message.snaps?.length) {
      obj.snaps = message.snaps.map((e) => MintWalletSnap.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserPositionsResponse>, I>>(base?: I): GetUserPositionsResponse {
    return GetUserPositionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserPositionsResponse>, I>>(object: I): GetUserPositionsResponse {
    const message = createBaseGetUserPositionsResponse();
    message.snaps = object.snaps?.map((e) => MintWalletSnap.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetUserPositionRequest(): GetUserPositionRequest {
  return { walletAddress: "", mintAddress: "" };
}

export const GetUserPositionRequest: MessageFns<GetUserPositionRequest> = {
  encode(message: GetUserPositionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.walletAddress !== "") {
      writer.uint32(10).string(message.walletAddress);
    }
    if (message.mintAddress !== "") {
      writer.uint32(18).string(message.mintAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserPositionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserPositionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.walletAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mintAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserPositionRequest {
    return {
      walletAddress: isSet(object.walletAddress) ? globalThis.String(object.walletAddress) : "",
      mintAddress: isSet(object.mintAddress) ? globalThis.String(object.mintAddress) : "",
    };
  },

  toJSON(message: GetUserPositionRequest): unknown {
    const obj: any = {};
    if (message.walletAddress !== "") {
      obj.walletAddress = message.walletAddress;
    }
    if (message.mintAddress !== "") {
      obj.mintAddress = message.mintAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserPositionRequest>, I>>(base?: I): GetUserPositionRequest {
    return GetUserPositionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserPositionRequest>, I>>(object: I): GetUserPositionRequest {
    const message = createBaseGetUserPositionRequest();
    message.walletAddress = object.walletAddress ?? "";
    message.mintAddress = object.mintAddress ?? "";
    return message;
  },
};

function createBaseGetUserPositionResponse(): GetUserPositionResponse {
  return { snap: undefined };
}

export const GetUserPositionResponse: MessageFns<GetUserPositionResponse> = {
  encode(message: GetUserPositionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snap !== undefined) {
      MintWalletSnap.encode(message.snap, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserPositionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserPositionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snap = MintWalletSnap.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserPositionResponse {
    return { snap: isSet(object.snap) ? MintWalletSnap.fromJSON(object.snap) : undefined };
  },

  toJSON(message: GetUserPositionResponse): unknown {
    const obj: any = {};
    if (message.snap !== undefined) {
      obj.snap = MintWalletSnap.toJSON(message.snap);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserPositionResponse>, I>>(base?: I): GetUserPositionResponse {
    return GetUserPositionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserPositionResponse>, I>>(object: I): GetUserPositionResponse {
    const message = createBaseGetUserPositionResponse();
    message.snap = (object.snap !== undefined && object.snap !== null)
      ? MintWalletSnap.fromPartial(object.snap)
      : undefined;
    return message;
  },
};

function createBaseGetWalletsRequest(): GetWalletsRequest {
  return { userUuid: "" };
}

export const GetWalletsRequest: MessageFns<GetWalletsRequest> = {
  encode(message: GetWalletsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userUuid !== "") {
      writer.uint32(10).string(message.userUuid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWalletsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWalletsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userUuid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWalletsRequest {
    return { userUuid: isSet(object.userUuid) ? globalThis.String(object.userUuid) : "" };
  },

  toJSON(message: GetWalletsRequest): unknown {
    const obj: any = {};
    if (message.userUuid !== "") {
      obj.userUuid = message.userUuid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWalletsRequest>, I>>(base?: I): GetWalletsRequest {
    return GetWalletsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWalletsRequest>, I>>(object: I): GetWalletsRequest {
    const message = createBaseGetWalletsRequest();
    message.userUuid = object.userUuid ?? "";
    return message;
  },
};

function createBaseGetWalletsResponse(): GetWalletsResponse {
  return { wallets: [] };
}

export const GetWalletsResponse: MessageFns<GetWalletsResponse> = {
  encode(message: GetWalletsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.wallets) {
      Wallet.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWalletsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWalletsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.wallets.push(Wallet.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWalletsResponse {
    return {
      wallets: globalThis.Array.isArray(object?.wallets) ? object.wallets.map((e: any) => Wallet.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetWalletsResponse): unknown {
    const obj: any = {};
    if (message.wallets?.length) {
      obj.wallets = message.wallets.map((e) => Wallet.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWalletsResponse>, I>>(base?: I): GetWalletsResponse {
    return GetWalletsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWalletsResponse>, I>>(object: I): GetWalletsResponse {
    const message = createBaseGetWalletsResponse();
    message.wallets = object.wallets?.map((e) => Wallet.fromPartial(e)) || [];
    return message;
  },
};

export type SnapviewService = typeof SnapviewService;
export const SnapviewService = {
  getSolPrice: {
    path: "/snapview.Snapview/GetSolPrice",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetSolPriceRequest) => Buffer.from(GetSolPriceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetSolPriceRequest.decode(value),
    responseSerialize: (value: GetSolPriceResponse) => Buffer.from(GetSolPriceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetSolPriceResponse.decode(value),
  },
  getMintPoolSnap: {
    path: "/snapview.Snapview/GetMintPoolSnap",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetMintPoolSnapRequest) => Buffer.from(GetMintPoolSnapRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetMintPoolSnapRequest.decode(value),
    responseSerialize: (value: GetMintPoolSnapResponse) => Buffer.from(GetMintPoolSnapResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetMintPoolSnapResponse.decode(value),
  },
  getUserPositions: {
    path: "/snapview.Snapview/GetUserPositions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserPositionsRequest) => Buffer.from(GetUserPositionsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetUserPositionsRequest.decode(value),
    responseSerialize: (value: GetUserPositionsResponse) =>
      Buffer.from(GetUserPositionsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetUserPositionsResponse.decode(value),
  },
  getUserPosition: {
    path: "/snapview.Snapview/GetUserPosition",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserPositionRequest) => Buffer.from(GetUserPositionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetUserPositionRequest.decode(value),
    responseSerialize: (value: GetUserPositionResponse) => Buffer.from(GetUserPositionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetUserPositionResponse.decode(value),
  },
  getWallets: {
    path: "/snapview.Snapview/GetWallets",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetWalletsRequest) => Buffer.from(GetWalletsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetWalletsRequest.decode(value),
    responseSerialize: (value: GetWalletsResponse) => Buffer.from(GetWalletsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetWalletsResponse.decode(value),
  },
} as const;

export interface SnapviewServer extends UntypedServiceImplementation {
  getSolPrice: handleUnaryCall<GetSolPriceRequest, GetSolPriceResponse>;
  getMintPoolSnap: handleUnaryCall<GetMintPoolSnapRequest, GetMintPoolSnapResponse>;
  getUserPositions: handleUnaryCall<GetUserPositionsRequest, GetUserPositionsResponse>;
  getUserPosition: handleUnaryCall<GetUserPositionRequest, GetUserPositionResponse>;
  getWallets: handleUnaryCall<GetWalletsRequest, GetWalletsResponse>;
}

export interface SnapviewClient extends Client {
  getSolPrice(
    request: GetSolPriceRequest,
    callback: (error: ServiceError | null, response: GetSolPriceResponse) => void,
  ): ClientUnaryCall;
  getSolPrice(
    request: GetSolPriceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetSolPriceResponse) => void,
  ): ClientUnaryCall;
  getSolPrice(
    request: GetSolPriceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetSolPriceResponse) => void,
  ): ClientUnaryCall;
  getMintPoolSnap(
    request: GetMintPoolSnapRequest,
    callback: (error: ServiceError | null, response: GetMintPoolSnapResponse) => void,
  ): ClientUnaryCall;
  getMintPoolSnap(
    request: GetMintPoolSnapRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetMintPoolSnapResponse) => void,
  ): ClientUnaryCall;
  getMintPoolSnap(
    request: GetMintPoolSnapRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetMintPoolSnapResponse) => void,
  ): ClientUnaryCall;
  getUserPositions(
    request: GetUserPositionsRequest,
    callback: (error: ServiceError | null, response: GetUserPositionsResponse) => void,
  ): ClientUnaryCall;
  getUserPositions(
    request: GetUserPositionsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUserPositionsResponse) => void,
  ): ClientUnaryCall;
  getUserPositions(
    request: GetUserPositionsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUserPositionsResponse) => void,
  ): ClientUnaryCall;
  getUserPosition(
    request: GetUserPositionRequest,
    callback: (error: ServiceError | null, response: GetUserPositionResponse) => void,
  ): ClientUnaryCall;
  getUserPosition(
    request: GetUserPositionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUserPositionResponse) => void,
  ): ClientUnaryCall;
  getUserPosition(
    request: GetUserPositionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUserPositionResponse) => void,
  ): ClientUnaryCall;
  getWallets(
    request: GetWalletsRequest,
    callback: (error: ServiceError | null, response: GetWalletsResponse) => void,
  ): ClientUnaryCall;
  getWallets(
    request: GetWalletsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetWalletsResponse) => void,
  ): ClientUnaryCall;
  getWallets(
    request: GetWalletsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetWalletsResponse) => void,
  ): ClientUnaryCall;
}

export const SnapviewClient = makeGenericClientConstructor(SnapviewService, "snapview.Snapview") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SnapviewClient;
  service: typeof SnapviewService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
