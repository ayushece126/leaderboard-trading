// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: message/misc.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "misc";

export interface T50SortedSetItem {
  address: Uint8Array;
  balance: bigint;
}

export interface T50SortedSet {
  items: T50SortedSetItem[];
}

function createBaseT50SortedSetItem(): T50SortedSetItem {
  return { address: new Uint8Array(0), balance: 0n };
}

export const T50SortedSetItem: MessageFns<T50SortedSetItem> = {
  encode(message: T50SortedSetItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    if (message.balance !== 0n) {
      if (BigInt.asUintN(64, message.balance) !== message.balance) {
        throw new globalThis.Error("value provided for field message.balance of type uint64 too large");
      }
      writer.uint32(16).uint64(message.balance);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): T50SortedSetItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseT50SortedSetItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.balance = reader.uint64() as bigint;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): T50SortedSetItem {
    return {
      address: isSet(object.address) ? bytesFromBase64(object.address) : new Uint8Array(0),
      balance: isSet(object.balance) ? BigInt(object.balance) : 0n,
    };
  },

  toJSON(message: T50SortedSetItem): unknown {
    const obj: any = {};
    if (message.address.length !== 0) {
      obj.address = base64FromBytes(message.address);
    }
    if (message.balance !== 0n) {
      obj.balance = message.balance.toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<T50SortedSetItem>, I>>(base?: I): T50SortedSetItem {
    return T50SortedSetItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<T50SortedSetItem>, I>>(object: I): T50SortedSetItem {
    const message = createBaseT50SortedSetItem();
    message.address = object.address ?? new Uint8Array(0);
    message.balance = object.balance ?? 0n;
    return message;
  },
};

function createBaseT50SortedSet(): T50SortedSet {
  return { items: [] };
}

export const T50SortedSet: MessageFns<T50SortedSet> = {
  encode(message: T50SortedSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      T50SortedSetItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): T50SortedSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseT50SortedSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(T50SortedSetItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): T50SortedSet {
    return {
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => T50SortedSetItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: T50SortedSet): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => T50SortedSetItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<T50SortedSet>, I>>(base?: I): T50SortedSet {
    return T50SortedSet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<T50SortedSet>, I>>(object: I): T50SortedSet {
    const message = createBaseT50SortedSet();
    message.items = object.items?.map((e) => T50SortedSetItem.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
