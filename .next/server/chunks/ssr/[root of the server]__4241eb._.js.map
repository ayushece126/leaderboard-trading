{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///Users/ayushmehta/trading-leaderboard/src/components/Authtest.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\"use client\";\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\n\n// Define the global Window type to include 'ethereum'\ndeclare global {\n  interface Window {\n    ethereum?: any; // Use 'any' to prevent strict type errors (or use a more specific type if needed)\n  }\n}\n\nconst AuthTest: React.FC = () => {\n  const [walletAddress, setWalletAddress] = useState<string | null>(null);\n  const [sessionToken, setSessionToken] = useState<string | null>(null);\n  const [nonce, setNonce] = useState<string | null>(null);\n  const [signature, setSignature] = useState<string | null>(null);\n  const [fingerprint, setFingerprint] = useState<string>(\n    \"test-fingerprint-123\"\n  ); // Replace with actual fingerprint logic\n\n  const handleConnectWallet = async () => {\n    if (!window.ethereum?.isPhantom) {\n      alert(\"Please install Phantom Wallet!\");\n      window.open(\"https://phantom.app/\", \"_blank\");\n      return;\n    }\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      setWalletAddress(address);\n    } catch (error) {\n      console.error(\"Wallet connect error:\", error);\n      alert(\n        \"Could not connect wallet. Please check if Phantom Wallet is properly installed.\"\n      );\n    }\n  };\n\n  const handleGetNonce = async () => {\n    if (!walletAddress) {\n      alert(\"Connect wallet first!\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"/api/auth/nonce\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ fingerprint }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to get nonce\");\n      }\n\n      const data = await response.json();\n      setNonce(data.nonce);\n    } catch (error: any) {\n      console.error(\"Error getting nonce:\", error);\n      alert(`Error getting nonce: ${error.message}`);\n    }\n  };\n\n  const handleSignMessage = async () => {\n    if (!walletAddress || !nonce) {\n      alert(\"Connect wallet and get nonce first!\");\n      return;\n    }\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const signedMessage = await signer.signMessage(nonce);\n      setSignature(signedMessage);\n    } catch (error) {\n      console.error(\"Signature error:\", error);\n      alert(\"Could not sign message.\");\n    }\n  };\n\n  const handleExchangeNonce = async () => {\n    if (!nonce || !signature || !walletAddress) {\n      alert(\"Get nonce and sign message first!\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"/api/auth/session\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          nonce,\n          fingerprint,\n          sessionInfo: \"test-session-info\",\n          walletAddress,\n          signedMessage: signature,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Session exchange failed\");\n      }\n\n      const data = await response.json();\n      setSessionToken(data.sessionToken);\n      localStorage.setItem(\"sessionToken\", data.sessionToken);\n      alert(\"Session token received and stored in localStorage!\");\n    } catch (error: any) {\n      console.error(\"Error exchanging nonce:\", error);\n      alert(`Error exchanging nonce: ${error.message}`);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Auth Test Component</h2>\n      <p>Wallet Address: {walletAddress || \"Not Connected\"}</p>\n      <p>Nonce: {nonce || \"Not Generated\"}</p>\n      <p>Signature: {signature || \"Not Signed\"}</p>\n      <p>Session Token: {sessionToken || \"Not Exchanged\"}</p>\n\n      <button onClick={handleConnectWallet}>Connect Wallet</button>\n      <button onClick={handleGetNonce} disabled={!walletAddress}>\n        Get Nonce\n      </button>\n      <button onClick={handleSignMessage} disabled={!nonce}>\n        Sign Message\n      </button>\n      <button onClick={handleExchangeNonce} disabled={!signature}>\n        Exchange Nonce\n      </button>\n\n      {sessionToken && (\n        <p style={{ color: \"green\", marginTop: \"10px\" }}>\n          Session Token Stored in localStorage!\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default AuthTest;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}