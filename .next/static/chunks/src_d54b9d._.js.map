{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/ayushmehta/trading-leaderboard/src/components/Authtest.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\"use client\";\nimport React, { useState, useEffect } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\n\n// Phantom Wallet types and declarations\ntype PhantomEvent = \"disconnect\" | \"connect\" | \"accountChanged\";\ninterface ConnectOpts {\n  onlyIfTrusted: boolean;\n}\ninterface PhantomProvider {\n  connect: (opts?: Partial<ConnectOpts>) => Promise<{ publicKey: PublicKey }>;\n  disconnect: () => Promise<void>;\n  on: (event: PhantomEvent, callback: (args: any) => void) => void;\n  signMessage: (message: Uint8Array) => Promise<{ signature: Uint8Array }>;\n  isPhantom: boolean;\n}\ndeclare global {\n  interface Window {\n    solana?: PhantomProvider;\n  }\n}\n\nconst AuthTest: React.FC = () => {\n  const [provider, setProvider] = useState<PhantomProvider | null>(null);\n  const [connected, setConnected] = useState(false);\n  const [pubKey, setPubKey] = useState<PublicKey | null>(null);\n  const [walletAvail, setWalletAvail] = useState(false);\n  const [sessionToken, setSessionToken] = useState<string | null>(null);\n  const [nonce, setNonce] = useState<string | null>(null);\n  const [signature, setSignature] = useState<string | null>(null);\n  const [fingerprint] = useState<string>(\"test-fingerprint-123\");\n\n  // Check for Phantom Wallet on mount\n  useEffect(() => {\n    if (\"solana\" in window) {\n      const solWindow = window as Window & { solana?: PhantomProvider };\n      if (solWindow.solana?.isPhantom) {\n        setProvider(solWindow.solana);\n        setWalletAvail(true);\n        // Attempt eager connection\n        solWindow.solana.connect({ onlyIfTrusted: true }).catch(() => {});\n      }\n    }\n  }, []);\n\n  // Set up event listeners\n  useEffect(() => {\n    if (!provider) return;\n\n    const handleConnect = (publicKey: PublicKey) => {\n      setConnected(true);\n      setPubKey(publicKey);\n    };\n\n    const handleDisconnect = () => {\n      setConnected(false);\n      setPubKey(null);\n    };\n\n    provider.on(\"connect\", handleConnect);\n    provider.on(\"disconnect\", handleDisconnect);\n\n    return () => {\n      provider.off(\"connect\", handleConnect);\n      provider.off(\"disconnect\", handleDisconnect);\n    };\n  }, [provider]);\n\n  const handleConnectWallet = async () => {\n    if (!provider) {\n      alert(\"Please install Phantom Wallet!\");\n      window.open(\"https://phantom.app/\", \"_blank\");\n      return;\n    }\n\n    try {\n      await provider.connect();\n    } catch (error) {\n      console.error(\"Connection error:\", error);\n      alert(\"Failed to connect to Phantom Wallet\");\n    }\n  };\n\n  const handleGetNonce = async () => {\n    if (!pubKey) {\n      alert(\"Connect wallet first!\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"/api/auth/nonce\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ fingerprint }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to get nonce\");\n      }\n\n      const data = await response.json();\n      setNonce(data.nonce);\n    } catch (error: any) {\n      console.error(\"Error getting nonce:\", error);\n      alert(`Error getting nonce: ${error.message}`);\n    }\n  };\n\n  const handleSignMessage = async () => {\n    if (!provider || !pubKey || !nonce) {\n      alert(\"Connect wallet and get nonce first!\");\n      return;\n    }\n\n    try {\n      const message = new TextEncoder().encode(nonce);\n      const { signature: sig } = await provider.signMessage(message);\n      setSignature(bs58.encode(sig));\n    } catch (error) {\n      console.error(\"Signature error:\", error);\n      alert(\"Could not sign message.\");\n    }\n  };\n\n  const handleExchangeNonce = async () => {\n    if (!nonce || !signature || !pubKey) {\n      alert(\"Get nonce and sign message first!\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"/api/auth/session\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          nonce,\n          fingerprint,\n          sessionInfo: \"test-session-info\",\n          walletAddress: pubKey.toBase58(),\n          signedMessage: signature,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Session exchange failed\");\n      }\n\n      const data = await response.json();\n      setSessionToken(data.sessionToken);\n      localStorage.setItem(\"sessionToken\", data.sessionToken);\n      alert(\"Session token received and stored in localStorage!\");\n    } catch (error: any) {\n      console.error(\"Error exchanging nonce:\", error);\n      alert(`Error exchanging nonce: ${error.message}`);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Auth Test Component (Phantom)</h2>\n      <p>Wallet Address: {pubKey ? pubKey.toBase58() : \"Not Connected\"}</p>\n      <p>Nonce: {nonce || \"Not Generated\"}</p>\n      <p>Signature: {signature || \"Not Signed\"}</p>\n      <p>Session Token: {sessionToken || \"Not Exchanged\"}</p>\n\n      <button onClick={handleConnectWallet} disabled={connected}>\n        {connected ? \"Connected to Phantom\" : \"Connect Phantom Wallet\"}\n      </button>\n      <button onClick={handleGetNonce} disabled={!connected}>\n        Get Nonce\n      </button>\n      <button onClick={handleSignMessage} disabled={!nonce}>\n        Sign Message\n      </button>\n      <button onClick={handleExchangeNonce} disabled={!signature}>\n        Exchange Nonce\n      </button>\n\n      {!walletAvail && (\n        <p style={{ color: \"red\", marginTop: \"10px\" }}>\n          Phantom Wallet not detected. Please install Phantom Wallet.\n        </p>\n      )}\n\n      {sessionToken && (\n        <p style={{ color: \"green\", marginTop: \"10px\" }}>\n          Session Token Stored in localStorage!\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default AuthTest;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}